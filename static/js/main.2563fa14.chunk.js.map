{"version":3,"sources":["features/counter/Counter.module.css","features/counter/counterSlice.js","features/user/userSlice.js","features/user/userLogin.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","userSlice","username","setUsername","logout","selectUser","user","Login","disptach","useDispatch","useState","setname","user_by_selector","useSelector","className","class","onChange","e","target","placeholder","type","Button","disabled","variant","color","onClick","alert","App","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,qD,gHCKjJC,EAAeC,YAAY,CAEtCC,KAAM,UAENC,aAAc,CAEZC,MAAO,GAQTC,SAAU,CACRC,UAAW,SAAAC,GAMTA,EAAMH,OAAS,GAEjBI,UAAW,SAAAD,GACTA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAO+BX,EAAaY,Q,EAAzDN,U,EAAWE,U,EAAWC,kBAiBtBT,EAAf,Q,eCnDaa,EAAYZ,YAAY,CAEnCC,KAAM,OAENC,aAAc,CAEZW,SAAU,MAQZT,SAAU,CACRU,YAAa,SAACR,EAAMG,GAMlBH,EAAMO,SAAWJ,EAAOC,QAAQG,UAElCE,OAAQ,SAAAT,GACNA,EAAMO,SAAW,S,EAOgBD,EAAUD,QAAlCG,E,EAAAA,YAAaC,E,EAAAA,OAefC,EAAa,SAAAV,GAAK,OAAIA,EAAMW,KAAKJ,UAE/BD,IAAf,Q,sBCJeM,MA1Cf,WAEI,IAAMC,EAAWC,cAFJ,EAGWC,mBAAS,CAAC,KAHrB,mBAGNpB,EAHM,KAGAqB,EAHA,KAuBPC,EAAmBC,YAAYR,GAIrC,OACI,gCAEI,4DACCO,EAAmB,kCAAKA,EAAL,mBAAyC,iDAC7D,sBAAKE,UAAU,UAAf,UACI,uBAAOC,MAAM,8CAA+CvB,MAAOF,EAAM0B,SAAU,SAACC,GAAD,OAAON,EAAQM,EAAEC,OAAO1B,QAAQ2B,YAAY,YAAYC,KAAK,SAChJ,cAACC,EAAA,EAAD,CAAQN,MAAM,8DAA8DO,UAAWhC,EAAOiC,QAAQ,YAAYC,MAAM,UAAUJ,KAAK,SAASK,QA1B1I,WACbnC,EACGkB,EAASL,EAAY,CAACD,SAAWZ,KAEjCoC,MAAM,wBAEVf,EAAQ,KAoBA,qBACA,cAACU,EAAA,EAAD,CAAQN,MAAM,8DAAgEQ,QAAQ,YAAYC,MAAM,SAASC,QAAS,WAjBlIjB,EAASJ,MAiBD,6BCmBDuB,MAzDf,WACE,OACE,qBAAKb,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCHOc,cAAe,CAO5BC,QAAS,CAEPvB,KAAMwB,KCHUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2563fa14.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1ceAW\",\"value\":\"Counter_value__2PYtC\",\"button\":\"Counter_button__MBS37\",\"textbox\":\"Counter_textbox__w2F-Q\",\"asyncButton\":\"Counter_asyncButton__6bTlO Counter_button__MBS37\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n// here counter is a layer\r\n// such layer are called Slice of the Store\r\n// such slices are created using createSlice\r\nexport const counterSlice = createSlice({\r\n  // and the slice has a name called counter\r\n  name: 'counter',\r\n  // who has a initial state\r\n  initialState: {\r\n    // and initial value\r\n    value: 0,\r\n  },\r\n  // and here we describe the reducer\r\n  // Reducers are functions that take the current state\r\n  //  and an action as arguments, and return a new state \r\n  // result. In other words, (state, action) => newState.\r\n  // here, increment, decrement and incerementByAmount\r\n  // are reducer functions\r\n  reducers: {\r\n    increment: state => {\r\n                // The below are defualt comments you get at creation:\r\n                // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n                // doesn't actually mutate the state because it uses the Immer library,\r\n                // which detects changes to a \"draft state\" and produces a brand new\r\n                // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n\r\n// and we basically export this to counterSlice.actions\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n// here counter is a layer\r\n// such layer are called Slice of the Store\r\n// such slices are created using createSlice\r\nexport const userSlice = createSlice({\r\n  // and the slice has a name called counter\r\n  name: 'user',\r\n  // who has a initial state\r\n  initialState: {\r\n    // and initial value\r\n    username: null,\r\n  },\r\n  // and here we describe the reducer\r\n  // Reducers are functions that take the current state\r\n  //  and an action as arguments, and return a new state \r\n  // result. In other words, (state, action) => newState.\r\n  // here, increment, decrement and incerementByAmount\r\n  // are reducer functions\r\n  reducers: {\r\n    setUsername: (state,action) => {\r\n                // The below are defualt comments you get at creation:\r\n                // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n                // doesn't actually mutate the state because it uses the Immer library,\r\n                // which detects changes to a \"draft state\" and produces a brand new\r\n                // immutable state based off those changes\r\n      state.username = action.payload.username;\r\n    },\r\n    logout: state => {\r\n      state.username = null;\r\n    },\r\n  },\r\n});\r\n\r\n\r\n// and we basically export this to counterSlice.actions\r\nexport const { setUsername, logout } = userSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = state => state.user.username;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport{setUsername, logout, selectUser} from './userSlice'\r\nimport 'tachyons'\r\nimport {Button } from '@material-ui/core';\r\nimport './userLogin.css'\r\n\r\n\r\nfunction Login() {\r\n\r\n    const disptach = useDispatch();\r\n    const [name, setname] = useState([''])\r\n\r\n\r\n\r\n\r\n    const LogInFunc = () => {\r\n        {name ? \r\n            disptach(setUsername({username : name}))\r\n            :\r\n            alert('No name value passed')\r\n        }\r\n        setname('')\r\n    }\r\n  \r\n    const LogOutFunc  = () => {\r\n        disptach(logout());\r\n    }\r\n\r\n    // through this now we can also use the value\r\n    // like printing, comparing it\r\n    const user_by_selector = useSelector(selectUser)\r\n\r\n   \r\n\r\n    return (\r\n        <div>\r\n\r\n            <h2>React and Redux-Login Page</h2>\r\n            {user_by_selector ? <p> {user_by_selector} is logged in</p>: <p>No one logged in</p> }\r\n            <div className='buttons'>\r\n                <input class=\"input-reset ba b--black-20 pa2 mb2 db w-100\"  value={name} onChange={(e) => setname(e.target.value)} placeholder=\"Your Name\" type=\"text\"  />\r\n                <Button class=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-black\" disabled={!name}  variant=\"contained\" color=\"primary\" type=\"submit\" onClick={LogInFunc}>LogMeIn</Button>\r\n                <Button class=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-black\"   variant=\"contained\" color=\"danger\" onClick={() => LogOutFunc()}>LogMeOut</Button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react';\r\nimport { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport Login from './features/user/userLogin';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Login />\r\n\r\n\r\n\r\n{/* \r\n\r\n        <Counter />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <span>\r\n          <span>Learn </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React\r\n          </a>\r\n          <span>, </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://redux.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Redux\r\n          </a>\r\n          <span>, </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://redux-toolkit.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Redux Toolkit\r\n          </a>\r\n          ,<span> and </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://react-redux.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React Redux\r\n          </a>\r\n        </span> */}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n// import counterReducer from '../features/counter/counterSlice';\r\nimport userReducer from '../features/user/userSlice';\r\n\r\n\r\n// here configureStore is configuring store for us\r\nexport default configureStore({\r\n  // and we are passing it a reducer\r\n  // and which as a layer called counter that has a reducer counterReducer\r\n  // you can have many layer\r\n  // and each layer and has a reducer\r\n  // such layer are called Slice of the Store\r\n  // you can have many layer here and all of them are independent to each other\r\n  reducer: {\r\n    // counter: counterReducer,\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}